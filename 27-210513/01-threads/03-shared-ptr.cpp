#include <shared_ptr>

int main() {
    std::shared_ptr<int> p = std::make_unique(10);

    // 1. Если у каждого потока своя копия p, то ок.
    // 2. Если разные потоки пытаются работать с одним p, то не ок (если только не сплошные чтения).
    // 3. Есть семейство atomic_* (atomic_load/atomic_store) специально для shared_ptr.

    // На самом деле shared_ptr<int> p - это три объекта:
    // 1. p - не потокобезопасно, но можно взять atomic_* или мьютекс
    // 2. Счётчик ссылок - потокобезопасно
    // 3. *p - не потокобезопасно, но можно сделать под мьютексом

    std::thread t1([p]() {
        for (int i = 0; i < 100'000; i++) {
            auto p2 = p;
            p = p2;
            ++*p;
        }
    });

    std::thread t2([p]() {
        for (int i = 0; i < 100'000; i++) {
            auto p2 = p;
            p = p2;
            ++*p;
        }
    });

    t1.join();
    t2.join();
}
